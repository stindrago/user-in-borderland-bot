(ns user-in-borderland-bot.commands  "Functions that take action on various message text contents."  (:require   [clojure.tools.logging :as log]   [clojure.string :as s]   [user-in-borderland-bot.config :as cfg]   [user-in-borderland-bot.fields :as fields]   [user-in-borderland-bot.games.shared :as games.shared]   [user-in-borderland-bot.handlers :as handlers]   [user-in-borderland-bot.logic :as logic]))(defn help  "Send info about this bot and available commands."  [bot msg]  (log/debug "/help or /start command received.")  (let [chat-id (fields/chat-id msg)]    (handlers/send-msg-mdv2 bot chat-id                            (str "*Lista dei comandi supportati*\n\n"                                 "\t/help \\- mostra questo messaggio di aiuto\\.\n"                                 "\t/rules \\- mostra le regole del gioco\\.\n"                                 "\t/games \\- mostra la lista dei giochi disponibili\\.\n"                                 "\t/play \\- inizia una partita\\."))))(defn rules  "Send info about this bot and available commands."  [bot msg]  (log/debug "/rules command received.")  (let [chat-id (fields/chat-id msg)]    (handlers/send-msg-md bot chat-id (str "*Regole*"                                           "\n\nIo sono il Game Master e ho preparato per voi 52 giochi."                                           "\nIl numero nella carta indica il livello di difficoltà del gioco."                                           "\nIl seme della carta india il tipo di gioco."                                           "\n  ♠️ Picche - *Fisico*, giochi di resistenza fisica, forza e agilità."                                           "\n  ♦️ Quadri - *Intelligenza*, giochi di intelligenza, strategia e ingegno."                                           "\n  ♥️ Cuori - *Psicologia*, giochi di psicologia, fiducia e tradimento."                                           "\n  ♣️ Fiori - *Equilibrio*, giochi che bilanciano tutti e tre i concetti con un elemento di lavoro di squadra."                                           "\n\nUsa /games per vedere la lista dei giochi."))))(defn games  "Send info about the available games."  [bot msg]  (log/debug "/games command received.")  (let [chat-id (fields/chat-id msg)        seed {:s "♠️" :d "♦️️" :h "♥️" :c "♣️"}        games  [{:d "K" :h "K" :c "K" :s "K"}                {:d "J" :h "J" :c "J" :s "J"}                {:d "Q" :h "Q" :c "Q" :s "Q"}                {:d "0" :h "0" :c "0" :s "10"}                {:d "9" :h "9" :c "9" :s "9"}                {:d "8" :h "8" :c "8" :s "8"}                {:d "7" :h "7" :c "7" :s "7"}                {:d "6" :h "6" :c "6" :s "6"}                {:d "5" :h "5" :c "5" :s "5"}                {:d "4" :h "4" :c "4" :s "4"}                {:d "3" :h "3" :c "3" :s "3"}                {:d "2" :h "2" :c "2" :s "2"}                {:d "A" :h "A" :c "A" :s "A"}]]    (handlers/send-msg-md bot                          chat-id                          (str "*Lista dei giochi*"                               "\n"                               "\n```"                               "\n" (format "%7s%6s%6s%6s\n" (:d seed) (:c seed) (:h seed) (:s seed))                               "\n"                               (clojure.string/join (for [card games]                                                      (format "%6s%6s%6s%6s\n" (:d card) (:c card) (:h card) (:s card))))                               "\n```"                               "\nPer iniziare una partita usa /play <card> <seed>."                               "\nPer ora solo `/play two of hearts`."))))(defn play  "Select the game to be played by the player."  [bot msg]  (log/debug "/play command received.")  (let [chat-id (fields/chat-id msg)        players @games.shared/players        player (fields/from-id msg)        username (fields/from-user msg)        group? (= (fields/chat-type msg) "group")]    (cond (and group?               (some? (logic/find-game msg)))          (logic/sign-up! bot msg (logic/find-game msg))          (and group?               (some? (get-in players [:groups chat-id :game])))          (logic/sign-up! bot msg (get-in players [:groups chat-id :game]))          (and group?               (nil? (logic/find-game msg))               (nil? (get-in players [:groups chat-id :game])))          (handlers/send-msg-md bot chat-id (str "Al momento non ci sono giochi in corso."                                                 "\n"                                                 "\nCrea un istanza e registrati per *2️⃣♥️* con `/play h2`."))          (and group? (some? (get-in players [:players player :playing :game])))          (handlers/send-msg-md bot chat-id (str "@" username                                                 ", stai gia giocando a *"                                                 (get-in cfg/games [(logic/find-game msg) :icon]) "*."))          (some? (get-in players [:players player :playing :game]))          (handlers/send-msg-md bot chat-id (str "@" username                                                 ", stai gia giocando a *"                                                 (get-in cfg/games [(logic/find-game msg) :icon])                                                 "* in ." (get-in players [:players player :playing :title])))          (false? group?)          (handlers/send-msg-md bot chat-id "Per registrarti ad un gioco devi essere in un gruppo con il bot.")          :else (handlers/send-msg-md bot chat-id (str "Gioco non valido."                                                       "\n\n Usa `/games` per vedere la lista dei giochi disponibili.")))))(defn do-action  "Do the appropriate actions called by the user."  [bot msg]  (let [chat-id (fields/chat-id msg)        players @games.shared/players        player (fields/from-id msg)        game-played (get-in players [:players player :playing :game])]    (if (some? game-played)      (logic/chose-action bot msg)      (handlers/send-msg-md bot chat-id (str "Non sei registrato a nessuno gioco."                                             "\n\nUsa /play per registrarti.")))))(defn used-command  "Check in `msg' for commands that matches and handle them appropriately."  [bot msg]  (let [msg-text (fields/text msg)]    (when (not (= nil msg-text))      (cond        (s/starts-with? msg-text (or "/start" "/start@user_in_borderland_bot")) (help bot msg)        (s/starts-with? msg-text (or "/help"  "/help@user_in_borderland_bot")) (help bot msg)        (s/starts-with? msg-text (or "/rules" "/rules@user_in_borderland_bot")) (rules bot msg)        (s/starts-with? msg-text (or "/games" "/games@user_in_borderland_bot")) (games bot msg)        (s/starts-with? msg-text (or "/play" "/play@user_in_borderland_bot")) (play bot msg)        (s/starts-with? msg-text (or "/do" "/do@user_in_borderland_bot")) (do-action bot msg)))))